package mil.af.weather.ui;

import com.offbytwo.jenkins.model.Build;
import com.offbytwo.jenkins.model.BuildResult;
import com.offbytwo.jenkins.model.BuildWithDetails;
import com.offbytwo.jenkins.model.Job;
import mil.af.weather.format.TimeFormat;
import java.awt.Cursor;
import java.io.IOException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import mil.af.weather.BuildMetrics;
import mil.af.weather.JenkinsHandler;

/**
 *
 * @author Blake Bartenbach
 */
public class BuildDowntimeAnalyzer extends javax.swing.JFrame {

    /**
     * Global variable containing a map of all jobs on the Jenkins server. (this
     * data structure is returned by the Jenkins API)
     */
    private final Map<String, Job> jobMap;
    /**
     * Variable holding the currently selected job.
     */
    private Job currentlySelectedJob;
    /**
     * Holds all builds that are currently in the buildList.
     */
    private List<Build> buildListContents = new ArrayList<>();
    /**
     * Total failed builds in the buildList.
     */
    private int failedBuilds = 0;
    /**
     * Total successful builds in the buildList.
     */
    private int successfulBuilds = 0;

    /**
     * Creates new form BuildDowntimeAnalyzer. Does not check for null jobMap.
     *
     * @param jobMap - The map of all jobs on the Jenkins server
     */
    public BuildDowntimeAnalyzer(Map<String, Job> jobMap) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuildDowntimeAnalyzer.class.getName()).log(java.util.logging.Level.SEVERE, "Failed to load UI of BuildDowntimeAnalyzer");
        }
        this.jobMap = jobMap;
        initComponents();
        // set everything in the UI up with some sane defaults for the user to see
        listJenkinsJobs.setListData(jobMap.keySet().toArray(new String[0]));
        listJenkinsBuilds.setListData(new String[0]);
        textTotalBuilds.setText(String.valueOf(0));
        textTotalFailedBuilds.setText(String.valueOf(0));
        textTotalSuccessfulBuilds.setText(String.valueOf(0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listJenkinsJobs = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textBuildDowntime = new javax.swing.JTextField();
        textBuildUptime = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        listJenkinsBuilds = new javax.swing.JList<>();
        btnSelectAll = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        textUptimePercentage = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textTotalFailedBuilds = new javax.swing.JTextField();
        textTotalSuccessfulBuilds = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textTotalBuilds = new javax.swing.JTextField();
        dateFrom = new org.jdatepicker.JDatePicker();
        dateTo = new org.jdatepicker.JDatePicker();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Build Downtime Analyzer");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Jobs");

        listJenkinsJobs.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listJenkinsJobs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listJenkinsJobs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listJenkinsJobsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listJenkinsJobs);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setText("Builds");

        jLabel3.setText("Total Build Downtime:");

        jLabel4.setText("Total Build Uptime:");

        listJenkinsBuilds.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listJenkinsBuilds.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        listJenkinsBuilds.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listJenkinsBuildsValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listJenkinsBuilds);

        btnSelectAll.setText("Select All");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabel5.setText("Uptime Percentage:");

        jLabel6.setText("Successful Builds:");

        jLabel7.setText("Failed Builds:");

        jLabel8.setText("Total Selected Builds:");

        dateFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFromActionPerformed(evt);
            }
        });

        dateTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateToActionPerformed(evt);
            }
        });

        jLabel9.setText("To");

        jLabel10.setText("From");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(188, 188, 188))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(textTotalFailedBuilds, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(textTotalBuilds)
                                            .addComponent(textTotalSuccessfulBuilds, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textBuildDowntime)
                                    .addComponent(textBuildUptime, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textUptimePercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnSelectAll)
                                        .addGap(27, 27, 27))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(dateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnClear)
                                        .addGap(104, 104, 104))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dateTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateFrom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectAll)
                    .addComponent(btnClear))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textBuildDowntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(textTotalFailedBuilds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textBuildUptime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(textTotalSuccessfulBuilds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textUptimePercentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(textTotalBuilds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event fires whenever the JList for Jenkins jobs changes.
     *
     * @param evt The event from Swing.
     */
    private void listJenkinsJobsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listJenkinsJobsValueChanged
        // this line is required or the event triggers twice.
        if (evt.getValueIsAdjusting()) {
            return;
        }

        // set wait cursor
        this.getComponent(0).setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        this.currentlySelectedJob = jobMap.get(listJenkinsJobs.getSelectedValue());
        List<String> buildsToDisplay = new ArrayList<>();

        try {
            this.buildListContents = this.currentlySelectedJob.details().getAllBuilds();

            // for each build, populate the build list in the UI with a human-readable string with build details.
            for (int i = 0; i < this.buildListContents.size(); i++) {
                BuildWithDetails currentBuild = this.buildListContents.get(i).details();
                String dateStamp = DateFormat.getDateInstance(DateFormat.LONG).format(new Date(currentBuild.getTimestamp()));
                String timeStamp = DateFormat.getTimeInstance(DateFormat.LONG).format(new Date(currentBuild.getTimestamp()));
                String id = currentBuild.getId();
                String status = currentBuild.getResult().toString();
                buildsToDisplay.add("(" + id + ") " + dateStamp + " " + timeStamp + " [" + status + "]");
                if (currentBuild.getResult() == BuildResult.SUCCESS) {
                    this.successfulBuilds += 1;
                } else if (currentBuild.getResult() == BuildResult.FAILURE) {
                    this.failedBuilds += 1;
                }
            }
        } catch (IOException ex) {
            // we can fall through this exception and either show a partial list in the UI or an empty list as the list was already initialized.
            JOptionPane.showMessageDialog(null, "An error was encountered getting builds for job: " + this.currentlySelectedJob, "Error", JOptionPane.ERROR_MESSAGE);
        }
        listJenkinsBuilds.setListData(buildsToDisplay.toArray(new String[0]));
        textTotalBuilds.setText(String.valueOf(0));
        textTotalFailedBuilds.setText(String.valueOf(0));
        textTotalSuccessfulBuilds.setText(String.valueOf(0));
        this.getComponent(0).setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_listJenkinsJobsValueChanged

    /**
     * Event fires whenever the JList of builds has changed.
     *
     * @param evt - The event from Swing.
     */
    private void listJenkinsBuildsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listJenkinsBuildsValueChanged
        // prevent event from firing twice
        if (evt.getValueIsAdjusting()) {
            return;
        }

        // if there's only one build for the job, let the user know there's nothing we can do.
        if (buildListContents.size() < 2) {
            JOptionPane.showMessageDialog(null, "Not enough builds for the current job to calcualte metrics.",
                    "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // check that the user selected more that one build
        if (listJenkinsBuilds.getSelectedValuesList().size() < 2) {
            textBuildDowntime.setText("");
            textBuildUptime.setText("");
            textUptimePercentage.setText("");
            return;
        }

        // set the wait cursor and begin calculating metrics
        this.getComponent(0).setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        // get all builds the user selected
        int[] indices = listJenkinsBuilds.getSelectedIndices();
        boolean containsFinalBuild = false;
        if (indices.length == this.buildListContents.size()) {
            // if all elements are selected
            containsFinalBuild = true;
        }
        List<BuildWithDetails> selectedBuilds = JenkinsHandler.getBuildsWithDetails(indices, this.buildListContents);

        // iterate through all builds and collect details
        BuildMetrics metrics = new BuildMetrics().buildMetrics(selectedBuilds, containsFinalBuild);

        // format the uptime and downtime and set them in the UI
        textBuildDowntime.setText(TimeFormat.formatMillisecondsToReadableTime(metrics.getDowntime()));
        textBuildUptime.setText(TimeFormat.formatMillisecondsToReadableTime(metrics.getUptime()));
        textUptimePercentage.setText(metrics.getUptimePercentage());
        textTotalBuilds.setText(String.valueOf(selectedBuilds.size()));
        textTotalFailedBuilds.setText(String.valueOf(metrics.getFailedBuilds()));
        textTotalSuccessfulBuilds.setText(String.valueOf(metrics.getSuccessfulBuilds()));

        // done waiting
        this.getComponent(0).setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_listJenkinsBuildsValueChanged

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        listJenkinsBuilds.setSelectionInterval(0, this.buildListContents.size() - 1);
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        listJenkinsBuilds.clearSelection();
        textTotalBuilds.setText("0");
        textTotalFailedBuilds.setText("0");
        textTotalSuccessfulBuilds.setText("0");
    }//GEN-LAST:event_btnClearActionPerformed

    private void dateFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFromActionPerformed
        GregorianCalendar fromCalendar = (GregorianCalendar) dateFrom.getModel().getValue();
        GregorianCalendar toCalendar = (GregorianCalendar) dateTo.getModel().getValue();
        if (toCalendar == null || fromCalendar == null) {
            return;
        }
        updateListRange();
    }//GEN-LAST:event_dateFromActionPerformed

    private void dateToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateToActionPerformed
        GregorianCalendar fromCalendar = (GregorianCalendar) dateFrom.getModel().getValue();
        GregorianCalendar toCalendar = (GregorianCalendar) dateTo.getModel().getValue();
        if (toCalendar == null || fromCalendar == null) {
            return;
        }
        updateListRange();
    }//GEN-LAST:event_dateToActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSelectAll;
    private org.jdatepicker.JDatePicker dateFrom;
    private org.jdatepicker.JDatePicker dateTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JList<String> listJenkinsBuilds;
    private javax.swing.JList<String> listJenkinsJobs;
    private javax.swing.JTextField textBuildDowntime;
    private javax.swing.JTextField textBuildUptime;
    private javax.swing.JTextField textTotalBuilds;
    private javax.swing.JTextField textTotalFailedBuilds;
    private javax.swing.JTextField textTotalSuccessfulBuilds;
    private javax.swing.JTextField textUptimePercentage;
    // End of variables declaration//GEN-END:variables

    private void updateListRange() {
        GregorianCalendar fromCalendar = (GregorianCalendar) dateFrom.getModel().getValue();
        GregorianCalendar toCalendar = (GregorianCalendar) dateTo.getModel().getValue();
        long fromDate = fromCalendar.getTime().getTime();
        long toDate = fromCalendar.getTime().getTime();
        List<Integer> datesToSelect = new ArrayList<>();
        for (int i = 0; i < this.buildListContents.size() - 1; i++) {
            try {
                if (buildListContents.get(i).details().getTimestamp() < fromDate
                        || buildListContents.get(i).details().getTimestamp() > toDate) {
                    datesToSelect.add(i+1);
                }
            } catch (IOException ex) {
                Logger.getLogger(BuildDowntimeAnalyzer.class.getName()).log(Level.SEVERE, "Failed to get build details for a build in the build list");
            }
        }
        Collections.reverse(datesToSelect);
        int[] selectedIndices = datesToSelect.stream().mapToInt(i -> i).toArray();
        listJenkinsBuilds.setSelectedIndices(selectedIndices);
    }
}
